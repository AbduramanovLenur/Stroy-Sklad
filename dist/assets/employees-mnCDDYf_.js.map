{"version":3,"file":"employees-mnCDDYf_.js","sources":["../../src/views/employees.vue"],"sourcesContent":["<template>\r\n    <section class=\"employees\">\r\n        <div class=\"employees__inner section-padding\">\r\n            <HeadPage\r\n                title=\"employeesTitle\" \r\n                @onSearch=\"($event) => employeesForm.search = $event\"\r\n                @onOpenFormModal=\"() => employeesHandler('create')\"\r\n            />\r\n            <Table \r\n                v-if=\"isSuccessEmployees && employees.length\"\r\n                :headers=\"headers\" \r\n                :table=\"employees\" \r\n                @onActionEdit=\"($event) => employeesHandler('edit', $event)\"\r\n                @onActionDelete=\"deleteEmployeesHandler\"\r\n            />\r\n            <Spinner \r\n                v-if=\"isLoadingEmployees\" \r\n            />\r\n            <div \r\n                v-if=\"(isSuccessEmployees && !employees.length) || isError\" \r\n                class=\"empty-table\"\r\n            >\r\n                {{ $t(\"emptyTableTitle\") }}\r\n            </div>\r\n        </div>\r\n        <FormModal :title=\"titleModal\">\r\n            <form class=\"employees__form\" @submit.prevent=\"submitFormHandler\">\r\n                <FormInput \r\n                    v-for=\"input in inputs\"\r\n                    :key=\"input.id\"\r\n                    v-model=\"employeesForm[input.model]\"\r\n                    :width=\"500\" \r\n                    :placeholder=\"$t(input.placeholder)\"\r\n                    :name=\"input.icon\"\r\n                    :error=\"v$?.[input?.errorKey]?.$error\" \r\n                    :textError=\"v$?.[input?.errorKey]?.$errors[0]?.$message\"\r\n                >\r\n                    {{ $t(input.label) }}\r\n                </FormInput>\r\n                <FormSelect \r\n                    v-for=\"select in selects\"\r\n                    :key=\"select.id\"\r\n                    v-model=\"employeesForm[select.model]\" \r\n                    :width=\"500\" \r\n                    :options=\"select.options\"\r\n                    :error=\"v$?.[select?.errorKey]?.$error\" \r\n                    :textError=\"v$?.[select?.errorKey]?.$errors[0]?.$message\"\r\n                    :success=\"select.success\"\r\n                    :loading=\"select.loading\"\r\n                    :show=\"select.show\"\r\n                    :requestFlag=\"requestFlag\"\r\n                >\r\n                    {{ $t(select.label) }}\r\n                </FormSelect>\r\n                <CustomButton \r\n                    className=\"form__submit\"\r\n                >\r\n                    {{ $t(\"formButton\") }}\r\n                </CustomButton>\r\n            </form>\r\n        </FormModal>\r\n    </section>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, computed } from \"vue\";\r\nimport { storeToRefs } from \"pinia\";\r\nimport { useVuelidate } from \"@vuelidate/core\";\r\nimport { required, minLength } from \"@/utils/i18n-validators.js\";\r\nimport { \r\n    useQueryClient, \r\n    useQuery, \r\n    useMutation \r\n} from \"@tanstack/vue-query\";\r\nimport { useModalsStore } from \"@/store/modalsStore.js\";\r\nimport { \r\n    getList, \r\n    getWithId, \r\n    create, \r\n    updateById, \r\n    deleteWithId \r\n} from \"@/services/crud.services.js\";\r\nimport { \r\n    manualGetOrganizations,\r\n    manualGetRoles,\r\n    manualGetStates\r\n} from \"@/services/manual.services.js\";\r\nimport { clearForm } from \"@/utils/secondary-functions.js\";\r\n\r\n\r\nconst queryClient = useQueryClient();\r\n\r\nconst modalsStore = useModalsStore();\r\nconst { toggleIsOpenModalForm } = modalsStore;\r\nconst { isOpenModalForm } = storeToRefs(modalsStore);\r\n\r\nconst titleModal = ref(\"addNewEmployeesTitle\");\r\nconst requestFlag = ref(\"\");\r\nconst requestId = ref(\"\");\r\n\r\nconst employeesForm = ref({\r\n    id: \"\",\r\n    fullName: \"\",\r\n    userName: \"\",\r\n    password: \"\",\r\n    phoneNumber: \"\",\r\n    organizationId: \"\",\r\n    roleId: \"\",\r\n    stateId: \"\",\r\n    search: \"\"\r\n});\r\n\r\nconst isEnabled = computed(() => isOpenModalForm);\r\nconst isEdit = computed(() => isOpenModalForm && requestFlag.value === 'edit');\r\n\r\nconst {\r\n    data: organizations,\r\n    isSuccess: isSuccessOrganizations,\r\n    isLoading: isLoadingOrganizations\r\n} = await useQuery({\r\n    queryKey: [\"organizations\"],\r\n    queryFn: () => manualGetOrganizations(),\r\n    enabled: isEnabled\r\n});\r\n\r\nconst {\r\n    data: roles,\r\n    isSuccess: isSuccessRoles,\r\n    isLoading: isLoadingRoles\r\n} = await useQuery({\r\n    queryKey: [\"roles\"],\r\n    queryFn: () => manualGetRoles(),\r\n    enabled: isEnabled\r\n});\r\n\r\nconst {\r\n    data: states,\r\n    isSuccess: isSuccessStates,\r\n    isLoading: isLoadingStates\r\n} = await useQuery({\r\n    queryKey: [\"states\"],\r\n    queryFn: () => manualGetStates(),\r\n    enabled: isEdit\r\n});\r\n\r\nconst rules = computed(() => {\r\n    switch (requestFlag.value) {\r\n        case \"edit\": {\r\n            return {\r\n                fullName: { required },\r\n                userName: { required },\r\n                phoneNumber: { required },\r\n                organizationId: { required },\r\n                roleId: { required },\r\n            }\r\n\r\n            break;\r\n        }\r\n        default: {\r\n            return {\r\n                fullName: { required },\r\n                userName: { required },\r\n                password: { required, minLength },\r\n                phoneNumber: { required },\r\n                organizationId: { required },\r\n                roleId: { required },\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\nconst headers = ref([\r\n    { id: 1, label: \"employeesFullName\", width: 300 },\r\n    { id: 2, label: \"employeesOrganization\", width: 320 },\r\n    { id: 3, label: \"employeesPhone\", width: 255 },\r\n    { id: 4, label: \"employeesRole\", width: 195 },\r\n    { id: 5, label: \"employeesState\", width: 250 },\r\n    { id: 8, label: \"employeesAction\", width: 190 },\r\n]);\r\n\r\nconst inputs = ref([\r\n    { \r\n        id: 1, \r\n        model: \"fullName\", \r\n        label: \"employeesFullNameLabel\", \r\n        placeholder: \"employeesFullNamePlaceholder\", \r\n        icon: \"person\", \r\n        errorKey: \"fullName\",\r\n    },\r\n    { \r\n        id: 2, \r\n        model: \"userName\", \r\n        label: \"employeesLoginLabel\", \r\n        placeholder: \"employeesLoginPlaceholder\", \r\n        icon: \"login\", \r\n        errorKey: \"userName\",\r\n    },\r\n    { \r\n        id: 3, \r\n        model: \"password\", \r\n        label: \"employeesPasswordLabel\", \r\n        placeholder: \"employeesPasswordPlaceholder\", \r\n        icon: \"password\", \r\n        errorKey: \"password\",\r\n    },\r\n    { \r\n        id: 4, \r\n        model: \"phoneNumber\", \r\n        label: \"employeesPhoneLabel\",\r\n        placeholder: \"employeesPhonePlaceholder\", \r\n        icon: \"phone\", \r\n        errorKey: \"phoneNumber\",\r\n    }\r\n]);\r\n\r\nconst selects = ref([\r\n    { \r\n        id: 1, \r\n        model: \"organizationId\", \r\n        label: \"employeesOrganizationLabel\", \r\n        options: organizations, \r\n        errorKey: \"organizationId\",\r\n        success: isSuccessOrganizations,\r\n        loading: isLoadingOrganizations,\r\n        show: [\"create\", \"edit\"]\r\n    },\r\n    { \r\n        id: 2, \r\n        model: \"roleId\", \r\n        label: \"employeesRoleLabel\", \r\n        options: roles, \r\n        errorKey: \"roleId\", \r\n        success: isSuccessRoles,\r\n        loading: isLoadingRoles,\r\n        show: [\"create\", \"edit\"]\r\n    },\r\n    { \r\n        id: 3, \r\n        model: \"stateId\", \r\n        label: \"stateOrganizationLabel\", \r\n        options: states,\r\n        success: isSuccessStates,\r\n        loading: isLoadingStates,\r\n        show: [\"edit\"]\r\n    }\r\n]);\r\n\r\nconst v$ = useVuelidate(rules, employeesForm);\r\n\r\nconst {\r\n    data: employees,\r\n    isLoading: isLoadingEmployees,\r\n    isSuccess: isSuccessEmployees,\r\n    isError\r\n} = await useQuery({\r\n    queryKey: [\"employees\"],\r\n    queryFn: () => getList(\"user\"),\r\n    select: (data) => {\r\n        return data.map((elem) => {\r\n            const employee = {\r\n                ...elem,\r\n                phone: elem.phoneNumber,\r\n                company: elem.organizationName\r\n            }\r\n\r\n            delete employee.phoneNumber;\r\n            delete employee.organizationName;\r\n\r\n            return employee;\r\n        })\r\n    }\r\n});\r\n\r\nconst {} = await useQuery({\r\n    queryKey: [\"employeesById\", requestId],\r\n    queryFn: () => getWithId(\"user\", requestId.value),\r\n    select: (data) => {\r\n        employeesForm.value.id = data.id;\r\n        employeesForm.value.fullName = data.fullname;\r\n        employeesForm.value.userName = data.userName;\r\n        employeesForm.value.phoneNumber = data.phoneNumber;\r\n        employeesForm.value.organizationId = data.organizationId;\r\n        employeesForm.value.roleId = data.roleId;\r\n        employeesForm.value.stateId = data.stateId;\r\n    },\r\n    enabled: isEdit\r\n});\r\n\r\nconst { mutate: createMutate } = useMutation({\r\n    mutationFn: (body) => create(\"user\", body),\r\n    onSuccess: () => {\r\n        queryClient.invalidateQueries({ queryKey: [\"employees\"] });\r\n    }\r\n});\r\n\r\nconst { mutate: updateMutate } = useMutation({\r\n    mutationFn: (body) => updateById(\"user\", body),\r\n    onSuccess: () => {\r\n        queryClient.invalidateQueries({ queryKey: [\"employees\"] });\r\n        queryClient.invalidateQueries({ queryKey: [\"employeesById\", requestId] });\r\n    }\r\n});\r\n\r\nconst { mutate: deleteMutate } = useMutation({\r\n    mutationFn: (idx) => deleteWithId(\"user\", idx),\r\n    onSuccess: () => {\r\n        queryClient.invalidateQueries({ queryKey: [\"employees\"] });\r\n        queryClient.invalidateQueries({ queryKey: [\"employeesById\", requestId] });\r\n    }\r\n});\r\n\r\nconst isOpenFormModal = (title, flag) => {\r\n    titleModal.value = title;\r\n    requestFlag.value = flag;\r\n    toggleIsOpenModalForm();\r\n\r\n    if (requestFlag.value === \"create\" && isOpenModalForm.value) {\r\n        employeesForm.value = clearForm(employeesForm.value);\r\n        v$.value.$reset();\r\n    }\r\n}\r\n\r\nconst employeesHandler = (flag, idx) => {\r\n    if (flag === \"edit\" && idx) {\r\n        requestId.value = idx;\r\n        isOpenFormModal(\"editEmployeesTitle\", \"edit\");\r\n        return;\r\n    }\r\n\r\n    isOpenFormModal(\"addNewEmployeesTitle\", \"create\");\r\n}\r\n\r\nconst deleteEmployeesHandler = (idx) => {\r\n    deleteMutate(idx);\r\n}\r\n\r\nconst submitFormHandler = () => {\r\n    v$.value.$validate();\r\n\r\n    if (v$.value.$errors.length) {\r\n        return;\r\n    }\r\n\r\n    if (requestFlag.value === \"create\") {\r\n        delete employeesForm.value.id;\r\n        delete employeesForm.value.stateId;\r\n        delete employeesForm.value.search;\r\n\r\n        createMutate(employeesForm.value);\r\n    } else {\r\n        updateMutate(employeesForm.value);\r\n    }\r\n\r\n    toggleIsOpenModalForm();\r\n    employeesForm.value = clearForm(employeesForm.value);\r\n    v$.value.$reset();\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.employees {\r\n    &__form {\r\n        display: grid;\r\n        grid-template-columns: repeat(2, 1fr);\r\n        gap: 20px;\r\n        @media (max-width: 1024px) {\r\n            gap: 10px;\r\n        }\r\n        @media (max-width: 768px) {\r\n            grid-template-columns: repeat(1, 1fr);\r\n            gap: 20px;\r\n        }\r\n    }\r\n}\r\n</style>"],"names":["queryClient","useQueryClient","modalsStore","useModalsStore","toggleIsOpenModalForm","isOpenModalForm","storeToRefs","titleModal","ref","requestFlag","requestId","employeesForm","isEnabled","computed","isEdit","organizations","isSuccessOrganizations","isLoadingOrganizations","__temp","__restore","_withAsyncContext","useQuery","manualGetOrganizations","roles","isSuccessRoles","isLoadingRoles","manualGetRoles","states","isSuccessStates","isLoadingStates","manualGetStates","rules","required","minLength","headers","inputs","selects","v$","useVuelidate","employees","isLoadingEmployees","isSuccessEmployees","isError","getList","data","elem","employee","getWithId","createMutate","useMutation","body","create","updateMutate","updateById","deleteMutate","idx","deleteWithId","isOpenFormModal","title","flag","clearForm","employeesHandler","deleteEmployeesHandler","submitFormHandler"],"mappings":"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"}