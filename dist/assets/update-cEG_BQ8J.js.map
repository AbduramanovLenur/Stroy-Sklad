{"version":3,"file":"update-cEG_BQ8J.js","sources":["../../src/views/employees/update.vue"],"sourcesContent":["<template>\r\n    <section class=\"manage section-height\">\r\n        <div class=\"manage__inner section-padding\">\r\n            <Title>\r\n                {{ $t(\"editEmployeesTitle\") }}\r\n            </Title>\r\n            <form class=\"manage__form form-manage\" @submit.prevent=\"submitHandler\">\r\n                <FormInput \r\n                    v-for=\"input in inputs\"\r\n                    :key=\"input.id\"\r\n                    v-model=\"state[input.model]\"\r\n                    :width=\"500\" \r\n                    :placeholder=\"$t(input.placeholder)\"\r\n                    :name=\"input.icon\"\r\n                    :error=\"v$?.[input?.errorKey]?.$error\" \r\n                    :textError=\"v$?.[input?.errorKey]?.$errors[0]?.$message\"\r\n                >\r\n                    {{ $t(input.label) }}\r\n                </FormInput>\r\n                <FormSelect \r\n                    v-for=\"select in selects\"\r\n                    :key=\"select.id\"\r\n                    v-model=\"state[select.model]\" \r\n                    :width=\"500\" \r\n                    :options=\"select.options\"\r\n                    :error=\"v$?.[select?.errorKey]?.$error\" \r\n                    :textError=\"v$?.[select?.errorKey]?.$errors[0]?.$message\"\r\n                    :success=\"select.success\"\r\n                    :loading=\"select.loading\"\r\n                >\r\n                    {{ $t(select.label) }}\r\n                </FormSelect>\r\n                <CustomButton \r\n                    :className=\"`form__submit ${v$?.stateId.$errors[0]?.$message ? 'centered' : ''}`\"\r\n                >\r\n                    {{ $t(\"formButton\") }}\r\n                </CustomButton>\r\n            </form>\r\n        </div>\r\n    </section>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, computed, watch } from \"vue\";\r\nimport { useRoute, useRouter } from \"vue-router\";\r\nimport { useVuelidate } from \"@vuelidate/core\";\r\nimport { useToast } from \"vue-toastification\";\r\nimport { useI18n } from \"vue-i18n\";\r\nimport { required } from \"@/utils/i18n-validators.js\";\r\nimport { useQueryClient, useQuery, useMutation } from \"@tanstack/vue-query\";\r\nimport { getWithId, updateById } from \"@/services/crud.services.js\";\r\nimport { manualGetOrganizations, manualGetRoles, manualGetStates } from \"@/services/manual.services.js\";\r\nimport { routes } from \"@/utils/routes.js\";\r\n\r\nconst queryClient = useQueryClient();\r\nconst router = useRouter();\r\nconst route = useRoute();\r\nconst toast = useToast();\r\nconst { t } = useI18n();\r\n\r\nconst slugId = ref(route.params.id);\r\n\r\nconst {\r\n    data: organizations,\r\n    isSuccess: isSuccessOrganizations,\r\n    isLoading: isLoadingOrganizations\r\n} = await useQuery({\r\n    queryKey: [\"organizations\"],\r\n    queryFn: () => manualGetOrganizations()\r\n});\r\n\r\nconst {\r\n    data: roles,\r\n    isSuccess: isSuccessRoles,\r\n    isLoading: isLoadingRoles\r\n} = await useQuery({\r\n    queryKey: [\"roles\"],\r\n    queryFn: () => manualGetRoles()\r\n});\r\n\r\nconst {\r\n    data: states,\r\n    isSuccess: isSuccessStates,\r\n    isLoading: isLoadingStates\r\n} = await useQuery({\r\n    queryKey: [\"states\"],\r\n    queryFn: () => manualGetStates()\r\n});\r\n\r\nconst state = ref({\r\n    id: \"\",\r\n    fullName: \"\",\r\n    userName: \"\",\r\n    password: \"\",\r\n    phoneNumber: \"\",\r\n    organizationId: \"\",\r\n    roleId: \"\",\r\n    stateId: \"\"\r\n});\r\n\r\nconst rules = computed(() => ({\r\n    id: { required },\r\n    fullName: { required },\r\n    userName: { required },\r\n    phoneNumber: { required },\r\n    organizationId: { required },\r\n    roleId: { required },\r\n    stateId: { required }\r\n}));\r\n\r\nconst v$ = useVuelidate(rules, state);\r\n\r\nconst inputs = ref([\r\n    { \r\n        id: 1, \r\n        model: \"fullName\", \r\n        label: \"employeesFullNameLabel\", \r\n        placeholder: \"employeesFullNamePlaceholder\", \r\n        icon: \"person\", \r\n        errorKey: \"fullName\",\r\n    },\r\n    { \r\n        id: 2, \r\n        model: \"userName\", \r\n        label: \"employeesLoginLabel\", \r\n        placeholder: \"employeesLoginPlaceholder\", \r\n        icon: \"login\", \r\n        errorKey: \"userName\",\r\n    },\r\n    { \r\n        id: 3, \r\n        model: \"password\", \r\n        label: \"employeesPasswordLabel\", \r\n        placeholder: \"employeesPasswordPlaceholder\", \r\n        icon: \"password\",\r\n    },\r\n    { \r\n        id: 4, \r\n        model: \"phoneNumber\", \r\n        label: \"employeesPhoneLabel\",\r\n        placeholder: \"employeesPhonePlaceholder\", \r\n        icon: \"phone\", \r\n        errorKey: \"phoneNumber\",\r\n    }\r\n]);\r\n\r\nconst selects = ref([\r\n    { \r\n        id: 1, \r\n        model: \"organizationId\", \r\n        label: \"employeesOrganizationLabel\", \r\n        options: organizations, \r\n        errorKey: \"organizationId\",\r\n        success: isSuccessOrganizations,\r\n        loading: isLoadingOrganizations\r\n    },\r\n    { \r\n        id: 2, \r\n        model: \"roleId\", \r\n        label: \"employeesRoleLabel\", \r\n        options: roles, \r\n        errorKey: \"roleId\", \r\n        success: isSuccessRoles,\r\n        loading: isLoadingRoles\r\n    },\r\n    { \r\n        id: 3, \r\n        model: \"stateId\", \r\n        label: \"employeesStateLabel\", \r\n        options: states,\r\n        success: isSuccessStates,\r\n        loading: isLoadingStates\r\n    }\r\n]);\r\n\r\nconst { isError } = await useQuery({\r\n    queryKey: [\"employeesById\", slugId],\r\n    queryFn: () => getWithId(\"user\", slugId.value),\r\n    select: (data) => {\r\n        state.value.id = data.id;\r\n        state.value.fullName = data.fullname;\r\n        state.value.userName = data.userName;\r\n        state.value.phoneNumber = data.phoneNumber;\r\n        state.value.organizationId = data.organizationId;\r\n        state.value.roleId = data.roleId;\r\n        state.value.stateId = data.stateId;\r\n    }\r\n});\r\n\r\nwatch(isError, (value) => {\r\n    if (value) {\r\n        router.push(routes.HOME.path);\r\n    }\r\n});\r\n\r\nconst { mutate: updateMutate } = useMutation({\r\n    mutationFn: (body) => updateById(\"user\", body),\r\n    onSuccess: () => {\r\n        queryClient.invalidateQueries({ queryKey: [\"employees\"] });\r\n        queryClient.invalidateQueries({ queryKey: [\"employeesById\", slugId] });\r\n        router.push(routes.EMPLOYEES.path);\r\n    }\r\n});\r\n\r\nconst submitHandler = async () => {\r\n    v$.value.$validate();\r\n\r\n    if (v$.value.$errors.length) {\r\n        return;\r\n    }\r\n\r\n    updateMutate(state.value);\r\n    v$.value.$reset();\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n\r\n</style>"],"names":["queryClient","useQueryClient","router","useRouter","route","useRoute","useToast","useI18n","slugId","ref","organizations","isSuccessOrganizations","isLoadingOrganizations","__temp","__restore","_withAsyncContext","useQuery","manualGetOrganizations","roles","isSuccessRoles","isLoadingRoles","manualGetRoles","states","isSuccessStates","isLoadingStates","manualGetStates","state","rules","computed","required","v$","useVuelidate","inputs","selects","isError","getWithId","data","watch","value","routes","updateMutate","useMutation","body","updateById","submitHandler"],"mappings":"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"}