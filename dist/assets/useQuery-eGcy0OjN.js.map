{"version":3,"file":"useQuery-eGcy0OjN.js","sources":["../../node_modules/@tanstack/query-core/build/modern/queryObserver.js","../../node_modules/@tanstack/vue-query/build/modern/useBaseQuery.js","../../node_modules/@tanstack/vue-query/build/modern/useQuery.js"],"sourcesContent":["// src/queryObserver.ts\nimport {\n  isServer,\n  isValidTimeout,\n  noop,\n  replaceData,\n  shallowEqualObjects,\n  timeUntilStale\n} from \"./utils.js\";\nimport { notifyManager } from \"./notifyManager.js\";\nimport { focusManager } from \"./focusManager.js\";\nimport { Subscribable } from \"./subscribable.js\";\nimport { canFetch } from \"./retryer.js\";\nvar QueryObserver = class extends Subscribable {\n  constructor(client, options) {\n    super();\n    this.options = options;\n    this.#client = client;\n    this.#selectError = null;\n    this.bindMethods();\n    this.setOptions(options);\n  }\n  #client;\n  #currentQuery = void 0;\n  #currentQueryInitialState = void 0;\n  #currentResult = void 0;\n  #currentResultState;\n  #currentResultOptions;\n  #selectError;\n  #selectFn;\n  #selectResult;\n  // This property keeps track of the last query with defined data.\n  // It will be used to pass the previous data and query to the placeholder function between renders.\n  #lastQueryWithDefinedData;\n  #staleTimeoutId;\n  #refetchIntervalId;\n  #currentRefetchInterval;\n  #trackedProps = /* @__PURE__ */ new Set();\n  bindMethods() {\n    this.refetch = this.refetch.bind(this);\n  }\n  onSubscribe() {\n    if (this.listeners.size === 1) {\n      this.#currentQuery.addObserver(this);\n      if (shouldFetchOnMount(this.#currentQuery, this.options)) {\n        this.#executeFetch();\n      } else {\n        this.updateResult();\n      }\n      this.#updateTimers();\n    }\n  }\n  onUnsubscribe() {\n    if (!this.hasListeners()) {\n      this.destroy();\n    }\n  }\n  shouldFetchOnReconnect() {\n    return shouldFetchOn(\n      this.#currentQuery,\n      this.options,\n      this.options.refetchOnReconnect\n    );\n  }\n  shouldFetchOnWindowFocus() {\n    return shouldFetchOn(\n      this.#currentQuery,\n      this.options,\n      this.options.refetchOnWindowFocus\n    );\n  }\n  destroy() {\n    this.listeners = /* @__PURE__ */ new Set();\n    this.#clearStaleTimeout();\n    this.#clearRefetchInterval();\n    this.#currentQuery.removeObserver(this);\n  }\n  setOptions(options, notifyOptions) {\n    const prevOptions = this.options;\n    const prevQuery = this.#currentQuery;\n    this.options = this.#client.defaultQueryOptions(options);\n    if (!shallowEqualObjects(prevOptions, this.options)) {\n      this.#client.getQueryCache().notify({\n        type: \"observerOptionsUpdated\",\n        query: this.#currentQuery,\n        observer: this\n      });\n    }\n    if (typeof this.options.enabled !== \"undefined\" && typeof this.options.enabled !== \"boolean\") {\n      throw new Error(\"Expected enabled to be a boolean\");\n    }\n    if (!this.options.queryKey) {\n      this.options.queryKey = prevOptions.queryKey;\n    }\n    this.#updateQuery();\n    const mounted = this.hasListeners();\n    if (mounted && shouldFetchOptionally(\n      this.#currentQuery,\n      prevQuery,\n      this.options,\n      prevOptions\n    )) {\n      this.#executeFetch();\n    }\n    this.updateResult(notifyOptions);\n    if (mounted && (this.#currentQuery !== prevQuery || this.options.enabled !== prevOptions.enabled || this.options.staleTime !== prevOptions.staleTime)) {\n      this.#updateStaleTimeout();\n    }\n    const nextRefetchInterval = this.#computeRefetchInterval();\n    if (mounted && (this.#currentQuery !== prevQuery || this.options.enabled !== prevOptions.enabled || nextRefetchInterval !== this.#currentRefetchInterval)) {\n      this.#updateRefetchInterval(nextRefetchInterval);\n    }\n  }\n  getOptimisticResult(options) {\n    const query = this.#client.getQueryCache().build(this.#client, options);\n    const result = this.createResult(query, options);\n    if (shouldAssignObserverCurrentProperties(this, result)) {\n      this.#currentResult = result;\n      this.#currentResultOptions = this.options;\n      this.#currentResultState = this.#currentQuery.state;\n    }\n    return result;\n  }\n  getCurrentResult() {\n    return this.#currentResult;\n  }\n  trackResult(result) {\n    const trackedResult = {};\n    Object.keys(result).forEach((key) => {\n      Object.defineProperty(trackedResult, key, {\n        configurable: false,\n        enumerable: true,\n        get: () => {\n          this.#trackedProps.add(key);\n          return result[key];\n        }\n      });\n    });\n    return trackedResult;\n  }\n  getCurrentQuery() {\n    return this.#currentQuery;\n  }\n  refetch({ ...options } = {}) {\n    return this.fetch({\n      ...options\n    });\n  }\n  fetchOptimistic(options) {\n    const defaultedOptions = this.#client.defaultQueryOptions(options);\n    const query = this.#client.getQueryCache().build(this.#client, defaultedOptions);\n    query.isFetchingOptimistic = true;\n    return query.fetch().then(() => this.createResult(query, defaultedOptions));\n  }\n  fetch(fetchOptions) {\n    return this.#executeFetch({\n      ...fetchOptions,\n      cancelRefetch: fetchOptions.cancelRefetch ?? true\n    }).then(() => {\n      this.updateResult();\n      return this.#currentResult;\n    });\n  }\n  #executeFetch(fetchOptions) {\n    this.#updateQuery();\n    let promise = this.#currentQuery.fetch(\n      this.options,\n      fetchOptions\n    );\n    if (!fetchOptions?.throwOnError) {\n      promise = promise.catch(noop);\n    }\n    return promise;\n  }\n  #updateStaleTimeout() {\n    this.#clearStaleTimeout();\n    if (isServer || this.#currentResult.isStale || !isValidTimeout(this.options.staleTime)) {\n      return;\n    }\n    const time = timeUntilStale(\n      this.#currentResult.dataUpdatedAt,\n      this.options.staleTime\n    );\n    const timeout = time + 1;\n    this.#staleTimeoutId = setTimeout(() => {\n      if (!this.#currentResult.isStale) {\n        this.updateResult();\n      }\n    }, timeout);\n  }\n  #computeRefetchInterval() {\n    return (typeof this.options.refetchInterval === \"function\" ? this.options.refetchInterval(this.#currentQuery) : this.options.refetchInterval) ?? false;\n  }\n  #updateRefetchInterval(nextInterval) {\n    this.#clearRefetchInterval();\n    this.#currentRefetchInterval = nextInterval;\n    if (isServer || this.options.enabled === false || !isValidTimeout(this.#currentRefetchInterval) || this.#currentRefetchInterval === 0) {\n      return;\n    }\n    this.#refetchIntervalId = setInterval(() => {\n      if (this.options.refetchIntervalInBackground || focusManager.isFocused()) {\n        this.#executeFetch();\n      }\n    }, this.#currentRefetchInterval);\n  }\n  #updateTimers() {\n    this.#updateStaleTimeout();\n    this.#updateRefetchInterval(this.#computeRefetchInterval());\n  }\n  #clearStaleTimeout() {\n    if (this.#staleTimeoutId) {\n      clearTimeout(this.#staleTimeoutId);\n      this.#staleTimeoutId = void 0;\n    }\n  }\n  #clearRefetchInterval() {\n    if (this.#refetchIntervalId) {\n      clearInterval(this.#refetchIntervalId);\n      this.#refetchIntervalId = void 0;\n    }\n  }\n  createResult(query, options) {\n    const prevQuery = this.#currentQuery;\n    const prevOptions = this.options;\n    const prevResult = this.#currentResult;\n    const prevResultState = this.#currentResultState;\n    const prevResultOptions = this.#currentResultOptions;\n    const queryChange = query !== prevQuery;\n    const queryInitialState = queryChange ? query.state : this.#currentQueryInitialState;\n    const { state } = query;\n    let { error, errorUpdatedAt, fetchStatus, status } = state;\n    let isPlaceholderData = false;\n    let data;\n    if (options._optimisticResults) {\n      const mounted = this.hasListeners();\n      const fetchOnMount = !mounted && shouldFetchOnMount(query, options);\n      const fetchOptionally = mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions);\n      if (fetchOnMount || fetchOptionally) {\n        fetchStatus = canFetch(query.options.networkMode) ? \"fetching\" : \"paused\";\n        if (!state.dataUpdatedAt) {\n          status = \"pending\";\n        }\n      }\n      if (options._optimisticResults === \"isRestoring\") {\n        fetchStatus = \"idle\";\n      }\n    }\n    if (options.select && typeof state.data !== \"undefined\") {\n      if (prevResult && state.data === prevResultState?.data && options.select === this.#selectFn) {\n        data = this.#selectResult;\n      } else {\n        try {\n          this.#selectFn = options.select;\n          data = options.select(state.data);\n          data = replaceData(prevResult?.data, data, options);\n          this.#selectResult = data;\n          this.#selectError = null;\n        } catch (selectError) {\n          this.#selectError = selectError;\n        }\n      }\n    } else {\n      data = state.data;\n    }\n    if (typeof options.placeholderData !== \"undefined\" && typeof data === \"undefined\" && status === \"pending\") {\n      let placeholderData;\n      if (prevResult?.isPlaceholderData && options.placeholderData === prevResultOptions?.placeholderData) {\n        placeholderData = prevResult.data;\n      } else {\n        placeholderData = typeof options.placeholderData === \"function\" ? options.placeholderData(\n          this.#lastQueryWithDefinedData?.state.data,\n          this.#lastQueryWithDefinedData\n        ) : options.placeholderData;\n        if (options.select && typeof placeholderData !== \"undefined\") {\n          try {\n            placeholderData = options.select(placeholderData);\n            this.#selectError = null;\n          } catch (selectError) {\n            this.#selectError = selectError;\n          }\n        }\n      }\n      if (typeof placeholderData !== \"undefined\") {\n        status = \"success\";\n        data = replaceData(\n          prevResult?.data,\n          placeholderData,\n          options\n        );\n        isPlaceholderData = true;\n      }\n    }\n    if (this.#selectError) {\n      error = this.#selectError;\n      data = this.#selectResult;\n      errorUpdatedAt = Date.now();\n      status = \"error\";\n    }\n    const isFetching = fetchStatus === \"fetching\";\n    const isPending = status === \"pending\";\n    const isError = status === \"error\";\n    const isLoading = isPending && isFetching;\n    const result = {\n      status,\n      fetchStatus,\n      isPending,\n      isSuccess: status === \"success\",\n      isError,\n      isInitialLoading: isLoading,\n      isLoading,\n      data,\n      dataUpdatedAt: state.dataUpdatedAt,\n      error,\n      errorUpdatedAt,\n      failureCount: state.fetchFailureCount,\n      failureReason: state.fetchFailureReason,\n      errorUpdateCount: state.errorUpdateCount,\n      isFetched: state.dataUpdateCount > 0 || state.errorUpdateCount > 0,\n      isFetchedAfterMount: state.dataUpdateCount > queryInitialState.dataUpdateCount || state.errorUpdateCount > queryInitialState.errorUpdateCount,\n      isFetching,\n      isRefetching: isFetching && !isPending,\n      isLoadingError: isError && state.dataUpdatedAt === 0,\n      isPaused: fetchStatus === \"paused\",\n      isPlaceholderData,\n      isRefetchError: isError && state.dataUpdatedAt !== 0,\n      isStale: isStale(query, options),\n      refetch: this.refetch\n    };\n    return result;\n  }\n  updateResult(notifyOptions) {\n    const prevResult = this.#currentResult;\n    const nextResult = this.createResult(this.#currentQuery, this.options);\n    this.#currentResultState = this.#currentQuery.state;\n    this.#currentResultOptions = this.options;\n    if (this.#currentResultState.data !== void 0) {\n      this.#lastQueryWithDefinedData = this.#currentQuery;\n    }\n    if (shallowEqualObjects(nextResult, prevResult)) {\n      return;\n    }\n    this.#currentResult = nextResult;\n    const defaultNotifyOptions = {};\n    const shouldNotifyListeners = () => {\n      if (!prevResult) {\n        return true;\n      }\n      const { notifyOnChangeProps } = this.options;\n      const notifyOnChangePropsValue = typeof notifyOnChangeProps === \"function\" ? notifyOnChangeProps() : notifyOnChangeProps;\n      if (notifyOnChangePropsValue === \"all\" || !notifyOnChangePropsValue && !this.#trackedProps.size) {\n        return true;\n      }\n      const includedProps = new Set(\n        notifyOnChangePropsValue ?? this.#trackedProps\n      );\n      if (this.options.throwOnError) {\n        includedProps.add(\"error\");\n      }\n      return Object.keys(this.#currentResult).some((key) => {\n        const typedKey = key;\n        const changed = this.#currentResult[typedKey] !== prevResult[typedKey];\n        return changed && includedProps.has(typedKey);\n      });\n    };\n    if (notifyOptions?.listeners !== false && shouldNotifyListeners()) {\n      defaultNotifyOptions.listeners = true;\n    }\n    this.#notify({ ...defaultNotifyOptions, ...notifyOptions });\n  }\n  #updateQuery() {\n    const query = this.#client.getQueryCache().build(this.#client, this.options);\n    if (query === this.#currentQuery) {\n      return;\n    }\n    const prevQuery = this.#currentQuery;\n    this.#currentQuery = query;\n    this.#currentQueryInitialState = query.state;\n    if (this.hasListeners()) {\n      prevQuery?.removeObserver(this);\n      query.addObserver(this);\n    }\n  }\n  onQueryUpdate() {\n    this.updateResult();\n    if (this.hasListeners()) {\n      this.#updateTimers();\n    }\n  }\n  #notify(notifyOptions) {\n    notifyManager.batch(() => {\n      if (notifyOptions.listeners) {\n        this.listeners.forEach((listener) => {\n          listener(this.#currentResult);\n        });\n      }\n      this.#client.getQueryCache().notify({\n        query: this.#currentQuery,\n        type: \"observerResultsUpdated\"\n      });\n    });\n  }\n};\nfunction shouldLoadOnMount(query, options) {\n  return options.enabled !== false && !query.state.dataUpdatedAt && !(query.state.status === \"error\" && options.retryOnMount === false);\n}\nfunction shouldFetchOnMount(query, options) {\n  return shouldLoadOnMount(query, options) || query.state.dataUpdatedAt > 0 && shouldFetchOn(query, options, options.refetchOnMount);\n}\nfunction shouldFetchOn(query, options, field) {\n  if (options.enabled !== false) {\n    const value = typeof field === \"function\" ? field(query) : field;\n    return value === \"always\" || value !== false && isStale(query, options);\n  }\n  return false;\n}\nfunction shouldFetchOptionally(query, prevQuery, options, prevOptions) {\n  return options.enabled !== false && (query !== prevQuery || prevOptions.enabled === false) && (!options.suspense || query.state.status !== \"error\") && isStale(query, options);\n}\nfunction isStale(query, options) {\n  return query.isStaleByTime(options.staleTime);\n}\nfunction shouldAssignObserverCurrentProperties(observer, optimisticResult) {\n  if (!shallowEqualObjects(observer.getCurrentResult(), optimisticResult)) {\n    return true;\n  }\n  return false;\n}\nexport {\n  QueryObserver\n};\n//# sourceMappingURL=queryObserver.js.map","// src/useBaseQuery.ts\nimport {\n  computed,\n  getCurrentScope,\n  onScopeDispose,\n  reactive,\n  readonly,\n  toRefs,\n  watch\n} from \"vue-demi\";\nimport { useQueryClient } from \"./useQueryClient.js\";\nimport { cloneDeepUnref, shouldThrowError, updateState } from \"./utils.js\";\nfunction useBaseQuery(Observer, options, queryClient) {\n  if (process.env.NODE_ENV === \"development\") {\n    if (!getCurrentScope()) {\n      console.warn(\n        'vue-query composables like \"useQuery()\" should only be used inside a \"setup()\" function or a running effect scope. They might otherwise lead to memory leaks.'\n      );\n    }\n  }\n  const client = queryClient || useQueryClient();\n  const defaultedOptions = computed(() => {\n    const clonedOptions = cloneDeepUnref(options);\n    if (typeof clonedOptions.enabled === \"function\") {\n      clonedOptions.enabled = clonedOptions.enabled();\n    }\n    const defaulted = client.defaultQueryOptions(clonedOptions);\n    defaulted._optimisticResults = client.isRestoring.value ? \"isRestoring\" : \"optimistic\";\n    return defaulted;\n  });\n  const observer = new Observer(client, defaultedOptions.value);\n  const state = reactive(observer.getCurrentResult());\n  let unsubscribe = () => {\n  };\n  watch(\n    client.isRestoring,\n    (isRestoring) => {\n      if (!isRestoring) {\n        unsubscribe();\n        unsubscribe = observer.subscribe((result) => {\n          updateState(state, result);\n        });\n      }\n    },\n    { immediate: true }\n  );\n  const updater = () => {\n    observer.setOptions(defaultedOptions.value);\n    updateState(state, observer.getCurrentResult());\n  };\n  watch(defaultedOptions, updater);\n  onScopeDispose(() => {\n    unsubscribe();\n  });\n  const refetch = (...args) => {\n    updater();\n    return state.refetch(...args);\n  };\n  const suspense = () => {\n    return new Promise(\n      (resolve, reject) => {\n        let stopWatch = () => {\n        };\n        const run = () => {\n          if (defaultedOptions.value.enabled !== false) {\n            observer.setOptions(defaultedOptions.value);\n            const optimisticResult = observer.getOptimisticResult(\n              defaultedOptions.value\n            );\n            if (optimisticResult.isStale) {\n              stopWatch();\n              observer.fetchOptimistic(defaultedOptions.value).then(resolve, reject);\n            } else {\n              stopWatch();\n              resolve(optimisticResult);\n            }\n          }\n        };\n        run();\n        stopWatch = watch(defaultedOptions, run);\n      }\n    );\n  };\n  watch(\n    () => state.error,\n    (error) => {\n      if (state.isError && !state.isFetching && shouldThrowError(defaultedOptions.value.throwOnError, [\n        error,\n        observer.getCurrentQuery()\n      ])) {\n        throw error;\n      }\n    }\n  );\n  const object = toRefs(readonly(state));\n  for (const key in state) {\n    if (typeof state[key] === \"function\") {\n      object[key] = state[key];\n    }\n  }\n  object.suspense = suspense;\n  object.refetch = refetch;\n  return object;\n}\nexport {\n  useBaseQuery\n};\n//# sourceMappingURL=useBaseQuery.js.map","// src/useQuery.ts\nimport { QueryObserver } from \"@tanstack/query-core\";\nimport { useBaseQuery } from \"./useBaseQuery.js\";\nfunction useQuery(options, queryClient) {\n  return useBaseQuery(QueryObserver, options, queryClient);\n}\nexport {\n  useQuery\n};\n//# sourceMappingURL=useQuery.js.map"],"names":["QueryObserver","_a","Subscribable","client","options","__privateAdd","_executeFetch","_updateStaleTimeout","_computeRefetchInterval","_updateRefetchInterval","_updateTimers","_clearStaleTimeout","_clearRefetchInterval","_updateQuery","_notify","_client","_currentQuery","_currentQueryInitialState","_currentResult","_currentResultState","_currentResultOptions","_selectError","_selectFn","_selectResult","_lastQueryWithDefinedData","_staleTimeoutId","_refetchIntervalId","_currentRefetchInterval","_trackedProps","__privateSet","__privateGet","shouldFetchOnMount","__privateMethod","executeFetch_fn","updateTimers_fn","shouldFetchOn","clearStaleTimeout_fn","clearRefetchInterval_fn","notifyOptions","prevOptions","prevQuery","shallowEqualObjects","updateQuery_fn","mounted","shouldFetchOptionally","updateStaleTimeout_fn","nextRefetchInterval","computeRefetchInterval_fn","updateRefetchInterval_fn","query","result","shouldAssignObserverCurrentProperties","trackedResult","key","defaultedOptions","fetchOptions","prevResult","prevResultState","prevResultOptions","queryInitialState","state","error","errorUpdatedAt","fetchStatus","status","isPlaceholderData","data","fetchOnMount","fetchOptionally","canFetch","replaceData","selectError","placeholderData","isFetching","isPending","isError","isLoading","isStale","nextResult","defaultNotifyOptions","shouldNotifyListeners","notifyOnChangeProps","notifyOnChangePropsValue","includedProps","typedKey","notify_fn","promise","noop","isServer","isValidTimeout","timeout","timeUntilStale","nextInterval","focusManager","notifyManager","listener","shouldLoadOnMount","field","value","observer","optimisticResult","useBaseQuery","Observer","queryClient","useQueryClient","computed","clonedOptions","cloneDeepUnref","defaulted","reactive","unsubscribe","watch","isRestoring","updateState","updater","onScopeDispose","refetch","args","suspense","resolve","reject","stopWatch","run","shouldThrowError","object","toRefs","readonly","useQuery"],"mappings":"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","x_google_ignoreList":[0,1,2]}