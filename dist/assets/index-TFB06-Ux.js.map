{"version":3,"file":"index-TFB06-Ux.js","sources":["../../src/views/org-user/index.vue"],"sourcesContent":["<template>\r\n    <section class=\"employees\" v-if=\"isShowList\">\r\n        <div class=\"employees__inner section-padding\">\r\n            <HeadPage\r\n                title=\"employeesTitle\" \r\n                :to=\"routes.CREATE_ORG_USER.path\"\r\n                :isShowCreate=\"user?.user?.modules?.includes(actionModules.ORG_USER.CREATE)\"\r\n            />\r\n            <Table \r\n                v-if=\"isSuccessEmployees && employees?.count\"\r\n                :headers=\"headers\" \r\n                :table=\"employees?.users\" \r\n                :to=\"routes.UPDATE_ORG_USER.name\"\r\n                :options=\"{ page, limit }\"\r\n                :isShowUpdate=\"user?.user?.modules?.includes(actionModules.ORG_USER.UPDATE)\"\r\n                :isShowDelete=\"user?.user?.modules?.includes(actionModules.ORG_USER.DELETE)\"\r\n                @onActionDelete=\"deleteHandler\"\r\n            />\r\n            <Pagination\r\n                :count=\"employees?.count\"\r\n                :isSucces=\"isSuccessEmployees\"\r\n            />\r\n            <Spinner v-if=\"isLoadingEmployees\" />\r\n            <div \r\n                v-if=\"(isSuccessEmployees && !employees?.count) || isError\" \r\n                class=\"empty-table shadowed\"\r\n            >\r\n                {{ $t(\"emptyTableTitle\") }}\r\n            </div>\r\n        </div>\r\n    </section>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, watch, onMounted, computed } from \"vue\";\r\nimport { storeToRefs } from \"pinia\";\r\nimport { useTableStore } from \"@/store/tableStore\";\r\nimport { useUserStore } from \"@/store/userStore\";\r\nimport { refDebounced } from \"@vueuse/core\";\r\nimport { \r\n    useQueryClient, \r\n    useQuery, \r\n    useMutation \r\n} from \"@tanstack/vue-query\";\r\nimport { getList, deleteWithId } from \"@/services/crud.services.js\";\r\nimport { routes } from \"@/utils/routes.js\";\r\nimport { actionModules } from \"@/utils/action-modules.js\";\r\n\r\nconst queryClient = useQueryClient();\r\n\r\nconst tableStore = useTableStore();\r\nconst { page, limit, search } = storeToRefs(tableStore);\r\n\r\nconst userStore = useUserStore();\r\nconst { user } = storeToRefs(userStore);\r\n\r\nconst isShowList = computed(() => !!user?.value.user?.modules?.includes(actionModules.ORG_USER.READ));\r\n\r\nconst employeesId = ref(\"\");\r\n\r\nconst debouncedSearch = refDebounced(search, 500);\r\n\r\nconst headers = ref([\r\n    { id: 1, label: \"employeesFullName\", width: 570 },\r\n    { id: 3, label: \"employeesPhone\", width: 290 },\r\n    { id: 4, label: \"employeesRole\", width: 310 }\r\n]);\r\n\r\nconst {\r\n    data: employees,\r\n    isLoading: isLoadingEmployees,\r\n    isSuccess: isSuccessEmployees,\r\n    isError\r\n} = await useQuery({\r\n    queryKey: [\"orgUsers\", { page, limit, debouncedSearch, organizationId: user.value?.user?.organizationId }],\r\n    queryFn: () => getList(\"user\", page.value, limit.value, debouncedSearch.value),\r\n    select: (data) => {\r\n        let employees = {...data};\r\n        employees.users = data?.users.map((elem) => {\r\n            const employee = {\r\n                ...elem,\r\n                phone: elem.phoneNumber,\r\n                name: elem.fullName\r\n            }\r\n\r\n            delete employee.fullName;\r\n            delete employee.phoneNumber;\r\n\r\n            return employee;\r\n        })\r\n\r\n        return employees;\r\n    },\r\n    enabled: isShowList\r\n});\r\n\r\nconst { mutate: deleteMutate } = useMutation({\r\n    mutationFn: (idx) => deleteWithId(\"user\", idx),\r\n    onSuccess: () => {\r\n        queryClient.invalidateQueries({ queryKey: [\"orgUsers\"] });\r\n        queryClient.invalidateQueries({ queryKey: [\"orgUserById\", employeesId] });\r\n    }\r\n});\r\n\r\nconst deleteHandler = (idx) => {\r\n    employeesId.value = idx;\r\n    deleteMutate(idx);\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped></style>"],"names":["queryClient","useQueryClient","tableStore","useTableStore","page","limit","search","storeToRefs","userStore","useUserStore","user","isShowList","computed","_b","_a","actionModules","employeesId","ref","debouncedSearch","refDebounced","headers","employees","isLoadingEmployees","isSuccessEmployees","isError","__temp","__restore","_withAsyncContext","useQuery","getList","data","elem","employee","deleteMutate","useMutation","idx","deleteWithId","deleteHandler"],"mappings":"ugBAgDA,MAAMA,EAAcC,GAAc,EAE5BC,EAAaC,EAAa,EAC1B,CAAE,KAAAC,EAAM,MAAAC,EAAO,OAAAC,CAAQ,EAAGC,EAAYL,CAAU,EAEhDM,EAAYC,EAAY,EACxB,CAAE,KAAAC,CAAM,EAAGH,EAAYC,CAAS,EAEhCG,EAAaC,EAAS,IAAA,SAAM,OAAC,GAACC,GAAAC,EAAAJ,GAAA,YAAAA,EAAM,MAAM,OAAZ,YAAAI,EAAkB,UAAlB,MAAAD,EAA2B,SAASE,EAAc,SAAS,OAAK,EAE9FC,EAAcC,EAAI,EAAE,EAEpBC,EAAkBC,GAAab,EAAQ,GAAG,EAE1Cc,EAAUH,EAAI,CAChB,CAAE,GAAI,EAAG,MAAO,oBAAqB,MAAO,GAAK,EACjD,CAAE,GAAI,EAAG,MAAO,iBAAkB,MAAO,GAAK,EAC9C,CAAE,GAAI,EAAG,MAAO,gBAAiB,MAAO,GAAK,CACjD,CAAC,EAEK,CACF,KAAMI,EACN,UAAWC,EACX,UAAWC,EACX,QAAAC,CACJ,GAAU,CAAAC,EAAAC,CAAA,EAAAC,EAAA,IAAA,SAAA,OAAAC,GAAS,CACf,SAAU,CAAC,WAAY,CAAE,KAAAxB,EAAM,MAAAC,EAAO,gBAAAa,EAAiB,gBAAgBL,GAAAC,EAAAJ,EAAK,QAAL,YAAAI,EAAY,OAAZ,YAAAD,EAAkB,cAAc,CAAE,EACzG,QAAS,IAAMgB,GAAQ,OAAQzB,EAAK,MAAOC,EAAM,MAAOa,EAAgB,KAAK,EAC7E,OAASY,GAAS,CACd,IAAIT,EAAY,CAAC,GAAGS,CAAI,EACxB,OAAAT,EAAU,MAAQS,GAAA,YAAAA,EAAM,MAAM,IAAKC,GAAS,CACxC,MAAMC,EAAW,CACb,GAAGD,EACH,MAAOA,EAAK,YACZ,KAAMA,EAAK,QACd,EAED,cAAOC,EAAS,SAChB,OAAOA,EAAS,YAETA,CACnB,GAEeX,CACV,EACD,QAASV,CACb,CAAC,EAAA,mBAEK,CAAE,OAAQsB,CAAc,EAAGC,GAAY,CACzC,WAAaC,GAAQC,GAAa,OAAQD,CAAG,EAC7C,UAAW,IAAM,CACbnC,EAAY,kBAAkB,CAAE,SAAU,CAAC,UAAU,CAAG,CAAA,EACxDA,EAAY,kBAAkB,CAAE,SAAU,CAAC,cAAegB,CAAW,CAAC,CAAE,CAC3E,CACL,CAAC,EAEKqB,EAAiBF,GAAQ,CAC3BnB,EAAY,MAAQmB,EACpBF,EAAaE,CAAG,CACpB"}