{"version":3,"file":"auth-sOnMdVg7.js","sources":["../../src/assets/images/auth/logo-auth.svg","../../src/services/auth.services.js","../../src/views/auth.vue"],"sourcesContent":["export default \"__VITE_ASSET__QpnzZNi___\"","import { request } from \"./generic.services\";\r\n\r\nexport const loginUser = (body) => request({ url: \"account/Login\", method: \"POST\", body });","<template>\r\n    <section class=\"auth\">\r\n        <div class=\"container\">\r\n            <div class=\"auth__inner\">\r\n                <div class=\"auth__wrapper\">\r\n                    <div class=\"auth__logo\">\r\n                        <img \r\n                            src=\"@/assets/images/auth/logo-auth.svg\" \r\n                            alt=\"logo\" \r\n                            width=\"415\" \r\n                            height=\"80\" \r\n                            loading=\"lazy\"\r\n                        >\r\n                    </div>\r\n                    <h2 class=\"auth__title\">\r\n                        {{ $t(\"login\") }}\r\n                    </h2>\r\n                    <form class=\"auth__form\" @submit.prevent=\"authHandler\">\r\n                        <label class=\"auth__label\">\r\n                            {{ $t(\"loginLabel\") }}\r\n                            <input \r\n                                class=\"auth__input\" \r\n                                type=\"text\" \r\n                                v-model=\"formData.userName\"\r\n                                :placeholder=\"$t('loginPlaceholder')\"\r\n                            >\r\n                            <span \r\n                                v-if=\"v$?.userName?.$error\" \r\n                                class=\"error-white\"\r\n                            >\r\n                                {{ v$?.userName?.$errors[0]?.$message }}\r\n                            </span>\r\n                        </label>\r\n                        <label class=\"auth__label\">\r\n                            {{ $t(\"passwordLabel\") }}\r\n                            <span class=\"auth__label-wrapper\">\r\n                                <input \r\n                                    class=\"auth__input\" \r\n                                    :type=\"isShow ? 'text' : 'password'\" \r\n                                    v-model=\"formData.password\"\r\n                                    :placeholder=\"$t('passwordPlaceholder')\"\r\n                                >\r\n                                <span class=\"auth__label-icon\" @click=\"() => isShow = !isShow\">\r\n                                    <Icon name=\"eye\" />\r\n                                </span>\r\n                            </span>\r\n                            <span \r\n                                v-if=\"v$?.password?.$error\" \r\n                                class=\"error-white\"\r\n                            >\r\n                                {{ v$?.password?.$errors[0]?.$message }}\r\n                            </span>\r\n                        </label>\r\n                        <button class=\"auth__submit\" type=\"submit\">\r\n                            {{ $t(\"loginButton\") }}\r\n                        </button>\r\n                    </form>\r\n                    <SwitcherLang />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </section>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, computed } from \"vue\";\r\nimport { useVuelidate } from \"@vuelidate/core\";\r\nimport { required, minLength } from \"@/utils/i18n-validators.js\";\r\nimport { useToast } from \"vue-toastification\";\r\nimport { useI18n } from \"vue-i18n\";\r\nimport { useRouter } from \"vue-router\";\r\nimport { clearForm } from \"@/utils/secondary-functions.js\";\r\nimport { useUserStore } from \"@/store/userStore\";\r\nimport { useMutation } from \"@tanstack/vue-query\";\r\nimport { loginUser } from \"@/services/auth.services.js\";\r\n\r\nconst router = useRouter();\r\nconst toast = useToast();\r\nconst { t } = useI18n();\r\n\r\nconst userStore = useUserStore();\r\nconst { setUser } = userStore;\r\n\r\nconst isShow = ref(false);\r\n\r\nconst formData = ref({\r\n    userName: \"\",\r\n    password: \"\"\r\n})\r\n\r\nconst rules = computed(() => ({\r\n    userName: { required },\r\n    password: { required, minLength }\r\n}));\r\n\r\nconst v$ = useVuelidate(rules, formData);\r\n\r\nconst inputs = ref([\r\n    { \r\n        id: 1, \r\n        label: \"loginLabel\", \r\n        type: \"text\", \r\n        model: \"userName\", \r\n        name: \"login\", \r\n        placeholder: \"loginPlaceholder\",\r\n        errorKey: \"userName\" \r\n    },\r\n    { \r\n        id: 2, \r\n        label: \"passwordLabel\", \r\n        type: \"password\", \r\n        model: \"password\", \r\n        name: \"password\", \r\n        placeholder: \"passwordPlaceholder\",\r\n        errorKey: \"password\"  \r\n    },\r\n]);\r\n\r\nconst { mutate: loginMutate } = useMutation({\r\n    mutationFn: (body) => loginUser(body),\r\n    onSuccess: (data) => {\r\n\r\n        if (!data) return;\r\n\r\n        setUser(data);\r\n\r\n        router.push(\"/\");\r\n        // toast.success(t(\"signInToast\"));\r\n\r\n        formData.value = clearForm(formData.value);\r\n        v$.value.$reset();\r\n    }\r\n});\r\n\r\nconst authHandler = () => {\r\n    v$.value.$validate();\r\n\r\n    if (v$.value.$errors.length) {\r\n        return;\r\n    }\r\n\r\n    loginMutate(formData.value);\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.auth {\r\n    background: radial-gradient(103.88% 58.43% at 56.74% 50%, #0085FF 0%, #003465 100%);\r\n    color: var(--white);\r\n    &__inner {\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        height: 100vh;\r\n    }\r\n    &__wrapper {\r\n        display: flex;\r\n        flex-direction: column;\r\n        align-items: center;\r\n        border-radius: 40px;\r\n        border: 3px solid rgba(88, 130, 193, 0.49);\r\n        background: rgba(88, 130, 193, 0.28);\r\n        backdrop-filter: blur(12.5px);\r\n        max-width: 690px;\r\n        width: 100%;\r\n        padding: 55px;\r\n        @media (max-width: 768px) {\r\n            padding: 55px 20px;\r\n        }\r\n        @media (max-width: 480px) {\r\n            padding: 35px 20px;\r\n        }\r\n    }\r\n    &__logo {\r\n        margin-bottom: 20px;\r\n    }\r\n    &__title {\r\n        font-size: 38px;\r\n        font-weight: 700;\r\n        margin-bottom: 25px;\r\n        @media (max-width: 1024px) {\r\n            font-size: 32px;\r\n        }\r\n        @media (max-width: 480px) {\r\n            font-size: 28px;\r\n            margin-bottom: 20px;\r\n        }\r\n        @media (max-width: 360px) {\r\n            font-size: 24px;\r\n            margin-bottom: 16px;\r\n        }\r\n        @media (max-width: 320px) {\r\n            font-size: 22px;\r\n        }\r\n    }\r\n    &__form {\r\n        display: flex;\r\n        flex-direction: column;\r\n        max-width: 500px;\r\n        width: 100%;\r\n        margin-bottom: 30px;\r\n    }\r\n    &__label {\r\n        width: 100%;\r\n        margin-bottom: 30px;\r\n        @media (max-width: 480px) {\r\n            margin-bottom: 20px;\r\n        }\r\n        &-wrapper {\r\n            position: relative;\r\n        }\r\n        &-icon {\r\n            position: absolute;\r\n            top: 65%;\r\n            transform: translateY(-50%);\r\n            right: 20px;\r\n        }\r\n    }\r\n    &__input {\r\n        width: 100%;\r\n        height: 50px;\r\n        padding: 0 50px 0 25px;\r\n        border-radius: 10px;\r\n        border: 1px solid var(--light);\r\n        color: var(--black);\r\n        margin-top: 5px;\r\n        @media (max-width: 480px) {\r\n            height: 40px;\r\n        }\r\n        &::placeholder {\r\n            font-size: 14px;\r\n            font-weight: 400;\r\n            color: var(--light);\r\n        }\r\n    }\r\n    &__submit {\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        font-size: 20px;\r\n        font-weight: 700;\r\n        color: #fff;\r\n        background-color: var(--dark-blue);\r\n        height: 50px;\r\n        width: 100%;\r\n        padding: 10px;\r\n        border-radius: 10px;\r\n        @media (max-width: 480px) {\r\n            font-size: 18px;\r\n            height: 40px;\r\n        }\r\n    }\r\n}\r\n\r\n@media (hover: hover) {\r\n    .auth {\r\n        &__submit {\r\n            transition: 0.5s;\r\n            &:hover {\r\n                background-color: var(--black);\r\n            }\r\n        }\r\n    }\r\n}\r\n</style>"],"names":["_imports_0","loginUser","body","request","router","useRouter","useToast","useI18n","userStore","useUserStore","setUser","isShow","ref","formData","rules","computed","required","minLength","v$","useVuelidate","loginMutate","useMutation","data","clearForm","authHandler"],"mappings":"kTAAA,MAAeA,EAAA,iCCEFC,GAAaC,GAASC,EAAQ,CAAE,IAAK,gBAAiB,OAAQ,OAAQ,KAAAD,EAAM,mhBC0EzF,MAAME,EAASC,EAAS,EACVC,EAAW,EACXC,EAAU,EAExB,MAAMC,EAAYC,EAAY,EACxB,CAAE,QAAAC,CAAS,EAAGF,EAEdG,EAASC,EAAI,EAAK,EAElBC,EAAWD,EAAI,CACjB,SAAU,GACV,SAAU,EACd,CAAC,EAEKE,EAAQC,EAAS,KAAO,CAC1B,SAAU,CAAE,SAAAC,CAAU,EACtB,SAAU,CAAE,SAAAA,EAAU,UAAAC,CAAW,CACrC,EAAE,EAEIC,EAAKC,EAAaL,EAAOD,CAAQ,EAExBD,EAAI,CACf,CACI,GAAI,EACJ,MAAO,aACP,KAAM,OACN,MAAO,WACP,KAAM,QACN,YAAa,mBACb,SAAU,UACb,EACD,CACI,GAAI,EACJ,MAAO,gBACP,KAAM,WACN,MAAO,WACP,KAAM,WACN,YAAa,sBACb,SAAU,UACb,CACL,CAAC,EAED,KAAM,CAAE,OAAQQ,CAAa,EAAGC,EAAY,CACxC,WAAanB,GAASD,GAAUC,CAAI,EACpC,UAAYoB,GAAS,CAEZA,IAELZ,EAAQY,CAAI,EAEZlB,EAAO,KAAK,GAAG,EAGfS,EAAS,MAAQU,EAAUV,EAAS,KAAK,EACzCK,EAAG,MAAM,SACZ,CACL,CAAC,EAEKM,EAAc,IAAM,CACtBN,EAAG,MAAM,YAEL,CAAAA,EAAG,MAAM,QAAQ,QAIrBE,EAAYP,EAAS,KAAK,CAC9B"}