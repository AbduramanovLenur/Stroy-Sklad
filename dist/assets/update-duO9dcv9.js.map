{"version":3,"file":"update-duO9dcv9.js","sources":["../../src/views/roles/update.vue"],"sourcesContent":["<template>\r\n    <section class=\"manage section-height shadowed\">\r\n        <div class=\"manage__inner section-padding\">\r\n            <ManageHead \r\n                title=\"editRolesTitle\" \r\n                :to=\"routes.ROLES.path\"\r\n            />\r\n            <form class=\"manage__form form-manage\" @submit.prevent=\"submitHandler\">\r\n                <FormInput \r\n                    v-for=\"input in inputs\"\r\n                    :key=\"input.id\"\r\n                    v-model=\"state[input.model]\"\r\n                    :width=\"500\" \r\n                    :placeholder=\"$t(input.placeholder)\"\r\n                    :name=\"input.icon\"\r\n                    :error=\"v$?.[input.errorKey]?.$error\" \r\n                    :textError=\"v$?.[input.errorKey]?.$errors[0]?.$message\"\r\n                >\r\n                    {{ $t(input.label) }}\r\n                </FormInput>\r\n                <FormSelect \r\n                    v-for=\"select in selects\"\r\n                    :key=\"select.id\"\r\n                    v-model=\"state[select.model]\" \r\n                    :width=\"500\" \r\n                    :options=\"select.options\"\r\n                    :error=\"v$?.[select?.errorKey]?.$error\" \r\n                    :placeholder=\"select?.placeholder\"\r\n                    :textError=\"v$?.[select?.errorKey]?.$errors[0]?.$message\"\r\n                    :success=\"select.success\"\r\n                    :loading=\"select.loading\"\r\n                >\r\n                    {{ $t(select.label) }}\r\n                </FormSelect>\r\n                <ActionsModules \r\n                    v-if=\"isSuccessModules\"\r\n                    v-model=\"state.roleModules\"\r\n                    :actions=\"modules\"\r\n                />\r\n                <CustomButton \r\n                    v-if=\"isSuccessModules\"\r\n                    :className=\"`form__submit manage__submit ${v$?.fullName.$errors[0]?.$message ? 'centered' : ''}`\"\r\n                >\r\n                    {{ $t(\"formButton\") }}\r\n                </CustomButton>\r\n            </form>\r\n            <Spinner v-if=\"isLoadingModules\" />\r\n        </div>\r\n    </section>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, computed, watch } from \"vue\";\r\nimport { useRoute, useRouter } from \"vue-router\";\r\nimport { useVuelidate } from \"@vuelidate/core\";\r\nimport { useToast } from \"vue-toastification\";\r\nimport { useI18n } from \"vue-i18n\";\r\nimport { required } from \"@/utils/i18n-validators.js\";\r\nimport { useQueryClient, useQuery, useMutation } from \"@tanstack/vue-query\";\r\nimport { getWithId, updateById } from \"@/services/crud.services.js\";\r\nimport { manualGetModules, manualGetStates } from \"@/services/manual.services.js\";\r\nimport { routes } from \"@/utils/routes.js\";\r\n\r\nconst queryClient = useQueryClient();\r\nconst router = useRouter();\r\nconst route = useRoute();\r\nconst toast = useToast();\r\nconst { t } = useI18n();\r\n\r\nconst slugId = ref(route.params.id);\r\n\r\nconst {\r\n    data: modules,\r\n    isLoading: isLoadingModules,\r\n    isSuccess: isSuccessModules\r\n} = await useQuery({\r\n    queryKey: [\"modules\"],\r\n    queryFn: () => manualGetModules()\r\n});\r\n\r\nconst {\r\n    data: states,\r\n    isSuccess: isSuccessStates,\r\n    isLoading: isLoadingStates\r\n} = await useQuery({\r\n    queryKey: [\"states\"],\r\n    queryFn: () => manualGetStates()\r\n});\r\n\r\nconst state = ref({\r\n    shortName: \"\",\r\n    fullName: \"\",\r\n    roleModules: [],\r\n    stateId: []\r\n});\r\n\r\nconst rules = computed(() => ({\r\n    shortName: { required },\r\n    fullName: { required },\r\n    stateId: { required }\r\n}));\r\n\r\nconst v$ = useVuelidate(rules, state);\r\n\r\nconst inputs = ref([\r\n    { \r\n        id: 1, \r\n        model: \"fullName\", \r\n        label: \"fullNameRoleLabel\", \r\n        placeholder: \"fullNameRolePlaceholder\", \r\n        icon: \"role\",\r\n        errorKey: \"fullName\",\r\n    },\r\n    { \r\n        id: 2, \r\n        model: \"shortName\", \r\n        label: \"shortNameRoleLabel\", \r\n        placeholder: \"shortNameRolePlaceholder\", \r\n        icon: \"role\",\r\n        errorKey: \"shortName\",\r\n    },\r\n]);\r\n\r\nconst selects = ref([\r\n    { \r\n        id: 1, \r\n        model: \"stateId\", \r\n        label: \"stateRoleLabel\",\r\n        placeholder: \"stateRolePlaceholder\",  \r\n        errorKey: \"stateId\",\r\n        options: states,\r\n        success: isSuccessStates,\r\n        loading: isLoadingStates\r\n    }\r\n]);\r\n\r\nconst { isError } = await useQuery({\r\n    queryKey: [\"rolesById\", slugId],\r\n    queryFn: () => getWithId(\"Role\", slugId.value),\r\n    select: (data) => {\r\n        state.value.shortName = data.shortName;\r\n        state.value.fullName = data.fullName;\r\n        state.value.roleModules = [...data.roleModules];\r\n        state.value.stateId = [data.stateId];\r\n    }\r\n});\r\n\r\nwatch(isError, (value) => {\r\n    if (value) {\r\n        router.push(routes.HOME.path);\r\n    }\r\n});\r\n\r\nconst { mutate: updateMutate } = useMutation({\r\n    onMutate: (body) => {\r\n        body.stateId = body.stateId[0];\r\n    },\r\n    mutationFn: (body) => updateById(\"Role\", body),\r\n    onSuccess: () => {\r\n        queryClient.invalidateQueries({ queryKey: [\"roles\"] });\r\n        queryClient.invalidateQueries({ queryKey: [\"rolesById\", slugId] });\r\n        router.push(routes.ROLES.path);\r\n    }\r\n});\r\n\r\nconst submitHandler = () => {\r\n    v$.value.$validate();\r\n\r\n    if (v$.value.$errors.length) {\r\n        return;\r\n    }\r\n\r\n    updateMutate(state.value);\r\n    v$.value.$reset();\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n\r\n</style>"],"names":["queryClient","useQueryClient","router","useRouter","route","useRoute","useToast","useI18n","slugId","ref","modules","isLoadingModules","isSuccessModules","__temp","__restore","_withAsyncContext","useQuery","manualGetModules","states","isSuccessStates","isLoadingStates","manualGetStates","state","rules","computed","required","v$","useVuelidate","inputs","selects","isError","getWithId","data","watch","value","routes","updateMutate","useMutation","body","updateById","submitHandler"],"mappings":"wmBA+DA,MAAMA,EAAcC,GAAc,EAC5BC,EAASC,GAAS,EAClBC,EAAQC,GAAQ,EACRC,GAAW,EACXC,GAAU,EAExB,MAAMC,EAASC,EAAIL,EAAM,OAAO,EAAE,EAE5B,CACF,KAAMM,EACN,UAAWC,EACX,UAAWC,CACf,GAAU,CAAAC,EAAAC,CAAA,EAAAC,EAAA,IAAAC,EAAS,CACf,SAAU,CAAC,SAAS,EACpB,QAAS,IAAMC,GAAkB,CACrC,CAAC,CAAA,mBAEK,CACF,KAAMC,EACN,UAAWC,EACX,UAAWC,CACf,GAAU,CAAAP,EAAAC,CAAA,EAAAC,EAAA,IAAAC,EAAS,CACf,SAAU,CAAC,QAAQ,EACnB,QAAS,IAAMK,GAAiB,CACpC,CAAC,CAAA,mBAEKC,EAAQb,EAAI,CACd,UAAW,GACX,SAAU,GACV,YAAa,CAAE,EACf,QAAS,CAAE,CACf,CAAC,EAEKc,EAAQC,GAAS,KAAO,CAC1B,UAAW,CAAE,SAAAC,CAAU,EACvB,SAAU,CAAE,SAAAA,CAAU,EACtB,QAAS,CAAE,SAAAA,CAAU,CACzB,EAAE,EAEIC,EAAKC,GAAaJ,EAAOD,CAAK,EAE9BM,EAASnB,EAAI,CACf,CACI,GAAI,EACJ,MAAO,WACP,MAAO,oBACP,YAAa,0BACb,KAAM,OACN,SAAU,UACb,EACD,CACI,GAAI,EACJ,MAAO,YACP,MAAO,qBACP,YAAa,2BACb,KAAM,OACN,SAAU,WACb,CACL,CAAC,EAEKoB,EAAUpB,EAAI,CAChB,CACI,GAAI,EACJ,MAAO,UACP,MAAO,iBACP,YAAa,uBACb,SAAU,UACV,QAASS,EACT,QAASC,EACT,QAASC,CACZ,CACL,CAAC,EAEK,CAAE,QAAAU,CAAS,GAAS,CAAAjB,EAAAC,CAAA,EAAAC,EAAA,IAAAC,EAAS,CAC/B,SAAU,CAAC,YAAaR,CAAM,EAC9B,QAAS,IAAMuB,GAAU,OAAQvB,EAAO,KAAK,EAC7C,OAASwB,GAAS,CACdV,EAAM,MAAM,UAAYU,EAAK,UAC7BV,EAAM,MAAM,SAAWU,EAAK,SAC5BV,EAAM,MAAM,YAAc,CAAC,GAAGU,EAAK,WAAW,EAC9CV,EAAM,MAAM,QAAU,CAACU,EAAK,OAAO,CACtC,CACL,CAAC,CAAA,mBAEDC,GAAMH,EAAUI,GAAU,CAClBA,GACAhC,EAAO,KAAKiC,EAAO,KAAK,IAAI,CAEpC,CAAC,EAED,KAAM,CAAE,OAAQC,CAAc,EAAGC,GAAY,CACzC,SAAWC,GAAS,CAChBA,EAAK,QAAUA,EAAK,QAAQ,CAAC,CAChC,EACD,WAAaA,GAASC,GAAW,OAAQD,CAAI,EAC7C,UAAW,IAAM,CACbtC,EAAY,kBAAkB,CAAE,SAAU,CAAC,OAAO,CAAG,CAAA,EACrDA,EAAY,kBAAkB,CAAE,SAAU,CAAC,YAAaQ,CAAM,CAAC,CAAE,EACjEN,EAAO,KAAKiC,EAAO,MAAM,IAAI,CAChC,CACL,CAAC,EAEKK,EAAgB,IAAM,CACxBd,EAAG,MAAM,YAEL,CAAAA,EAAG,MAAM,QAAQ,SAIrBU,EAAad,EAAM,KAAK,EACxBI,EAAG,MAAM,SACb"}